@RestResource(urlMapping='/Adhoc_Event__c/*')

global with sharing class AdhocEventTriggerHandler {
     
    global static void doPost(List<Adhoc_Event__c> EventList)
    {	 
		system.debug(EventList);
        for(Adhoc_Event__c adhoc : EventList)
        {
            postEvent(adhoc.Id, adhoc.Subject__c, ToGoogleDateTime(adhoc.Start_Date__c), ToGoogleDateTime(adhoc.End_Date__c), adhoc.Manager_Email__c);
        } 
        
    }
    	
    	@future (callout=true)
    	global static void postEvent(String EventId, String eventSubject, String startDate, String endDate, String managerEmail)
        {
            
         PostHttpRequest(EventId, eventSubject,startDate, endDate, managerEmail );
            
	    }
    
    
     @HttpPost
     global static void PostHttpRequest(String EventId, String eventSubject, String startDate, String endDate, String managerEmail)
     {
      
        JSONGenerator gen = JSON.createGenerator(true);
        gen.writeStartObject();
        gen.writeFieldName('end');
        gen.writeStartObject();
        
        gen.writeStringField('dateTime', endDate);
        gen.writeStringField('timeZone', 'Asia/Karachi');
        gen.writeEndObject();
        gen.writeFieldName('start');
        gen.writeStartObject();
        
        gen.writeStringField('dateTime', startDate);
        gen.writeStringField('timeZone', 'Asia/Karachi');
        gen.writeEndObject();
        
        gen.writeStringField('summary', eventSubject);
        gen.writeFieldName('attendees');
        gen.writeStartArray();
        gen.writeStartObject();
        gen.writeStringField('email', managerEmail);
        gen.writeStringField('responseStatus', 'needsAction');
        gen.writeStringField('displayName', 'Sufyan');
        gen.writeEndObject();
        gen.writeStartObject();
        gen.writeStringField('email','sufyan.ashraf@ocloudsolutions.net' );
        gen.writeStringField('responseStatus', 'accepted');
        gen.writeStringField('displayName', 'sufyan Ashraf');
        gen.writeBooleanField('organizer', true);
        gen.writeBooleanField('self', true);
        gen.writeEndObject();
        gen.writeEndArray();
        gen.writeEndObject();
		
         
        HttpRequest request = new HttpRequest();
        request.setEndpoint('callout:Google_Calendar/calendars/primary/events');
        request.setHeader('Content-Type', 'application/json');
        request.setMethod('POST');
        request.setTimeout(120000);
        request.setBody(gen.getAsString());        

        HttpResponse response = (new Http()).send(request);
        
        
       	Map<String, Object> Obj = (Map<String, Object >)JSON.deserializeUntyped(response.getBody());
         String Calenderid = String.Valueof(Obj.get('id'));
  
         
         List<Adhoc_Event__c>  updateCalenderEventId = new List<Adhoc_Event__c>();
         
         Adhoc_Event__c newobj = [SELECT Calender_Event_Id__c FROM Adhoc_Event__c WHERE ID = :EventId];
         newobj.Calender_Event_Id__c = Calenderid;			
         updateCalenderEventId.add(newobj);
         
         if(!updateCalenderEventId.isEmpty())
        			{
						update updateCalenderEventId;
        			} 	 
     }
       
    public static String ToGoogleDateTime(DateTime SFTime)
    {
    String DateStr = String.valueOf(SFTime.date());
    String timeStr = String.valueOf(SFTime.time()); 
    String calenderDataTime = DateStr + 'T' + timeStr; 
    return calenderDataTime;
    }
    
    
    global static void doDelete(List<Adhoc_Event__c> EventList)
    {	 
        
		
        for(Adhoc_Event__c adhoc : EventList)
        {
            deleteEvent(adhoc.Calender_Event_Id__c, adhoc.Subject__c, ToGoogleDateTime(adhoc.Start_Date__c), ToGoogleDateTime(adhoc.End_Date__c), adhoc.Manager_Email__c);
       } 
        
    }
    
    	@future (callout=true)
    	global static void deleteEvent(String EventId, String eventSubject, String startDate, String endDate, String managerEmail)
        {
            
        
        HttpRequest request = new HttpRequest();
       
        request.setEndpoint('callout:Google_Calendar/calendars/primary/events/' + EventId);
        request.setHeader('Content-Type', 'application/json');
        request.setMethod('DELETE');
        request.setTimeout(120000);        

        HttpResponse response = (new Http()).send(request);    
            
	    }
  
    	global static void doUpdate(List<Adhoc_Event__c> EventList,  List<Adhoc_Event__c> EventListold)
    {	 
        Adhoc_Event__c obj1 = EventList[0];
        Adhoc_Event__c obj2 = EventListold[0];
        if(obj1.Subject__c != obj2.Subject__c || obj1.Manager_Email__c != obj2.Manager_Email__c 
          		|| obj1.Start_Date__c != obj2.Start_Date__c || obj1.End_Date__c != obj2.End_Date__c)
        {
		
        for(Adhoc_Event__c adhoc : EventList )
        {
            
              updateEvent(adhoc.Calender_Event_Id__c, adhoc.Subject__c, ToGoogleDateTime(adhoc.Start_Date__c), ToGoogleDateTime(adhoc.End_Date__c), adhoc.Manager_Email__c);                   
        } 
            
            
        }
        
    }
    
    
    	@future (callout=true)
    	global static void updateEvent(String EventId, String eventSubject, String startDate, String endDate, String managerEmail)
        {
   
        
        JSONGenerator gen = JSON.createGenerator(true);
        gen.writeStartObject();
        gen.writeFieldName('end');
        gen.writeStartObject();
        
        gen.writeStringField('dateTime', endDate);
        gen.writeStringField('timeZone', 'Asia/Karachi');
        gen.writeEndObject();
        gen.writeFieldName('start');
        gen.writeStartObject();
       
        gen.writeStringField('dateTime', startDate);
        gen.writeStringField('timeZone', 'Asia/Karachi');
        gen.writeEndObject();
        
        gen.writeStringField('summary', eventSubject);
        gen.writeFieldName('attendees');
        gen.writeStartArray();
        gen.writeStartObject();
        gen.writeStringField('email', managerEmail);
        gen.writeStringField('responseStatus', 'needsAction');
        gen.writeStringField('displayName', 'Sufyan');
        gen.writeEndObject();
        gen.writeStartObject();
        gen.writeStringField('email','sufyan.ashraf@ocloudsolutions.net' );
        gen.writeStringField('responseStatus', 'accepted');
        gen.writeStringField('displayName', 'sufyan Ashraf');
        gen.writeBooleanField('organizer', true);
        gen.writeBooleanField('self', true);
        gen.writeEndObject();
        gen.writeEndArray();
        gen.writeEndObject();
		
        HttpRequest request = new HttpRequest();
            
        request.setEndpoint('callout:Google_Calendar/calendars/primary/events/' + EventId);
        request.setHeader('Content-Type', 'application/json');
        request.setMethod('PATCH');
        request.setTimeout(120000);
        request.setBody(gen.getAsString());        
        HttpResponse response = (new Http()).send(request);
    
        }
    
    
    }